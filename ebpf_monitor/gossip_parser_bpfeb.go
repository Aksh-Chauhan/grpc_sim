// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadGossip_parser returns the embedded CollectionSpec for gossip_parser.
func loadGossip_parser() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Gossip_parserBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load gossip_parser: %w", err)
	}

	return spec, err
}

// loadGossip_parserObjects loads gossip_parser and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*gossip_parserObjects
//	*gossip_parserPrograms
//	*gossip_parserMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadGossip_parserObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadGossip_parser()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// gossip_parserSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type gossip_parserSpecs struct {
	gossip_parserProgramSpecs
	gossip_parserMapSpecs
	gossip_parserVariableSpecs
}

// gossip_parserProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type gossip_parserProgramSpecs struct {
	CaptureHlfGossip *ebpf.ProgramSpec `ebpf:"capture_hlf_gossip"`
}

// gossip_parserMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type gossip_parserMapSpecs struct {
	GossipEvents *ebpf.MapSpec `ebpf:"gossip_events"`
}

// gossip_parserVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type gossip_parserVariableSpecs struct {
}

// gossip_parserObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadGossip_parserObjects or ebpf.CollectionSpec.LoadAndAssign.
type gossip_parserObjects struct {
	gossip_parserPrograms
	gossip_parserMaps
	gossip_parserVariables
}

func (o *gossip_parserObjects) Close() error {
	return _Gossip_parserClose(
		&o.gossip_parserPrograms,
		&o.gossip_parserMaps,
	)
}

// gossip_parserMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadGossip_parserObjects or ebpf.CollectionSpec.LoadAndAssign.
type gossip_parserMaps struct {
	GossipEvents *ebpf.Map `ebpf:"gossip_events"`
}

func (m *gossip_parserMaps) Close() error {
	return _Gossip_parserClose(
		m.GossipEvents,
	)
}

// gossip_parserVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadGossip_parserObjects or ebpf.CollectionSpec.LoadAndAssign.
type gossip_parserVariables struct {
}

// gossip_parserPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadGossip_parserObjects or ebpf.CollectionSpec.LoadAndAssign.
type gossip_parserPrograms struct {
	CaptureHlfGossip *ebpf.Program `ebpf:"capture_hlf_gossip"`
}

func (p *gossip_parserPrograms) Close() error {
	return _Gossip_parserClose(
		p.CaptureHlfGossip,
	)
}

func _Gossip_parserClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed gossip_parser_bpfeb.o
var _Gossip_parserBytes []byte
